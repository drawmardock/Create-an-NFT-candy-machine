{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldRefreshTokenForRecordState = void 0;\n\nvar react_1 = require(\"react\");\n\nvar config_1 = require(\"../solana/config\");\n\nvar tokenUtils_1 = require(\"../utils/tokenUtils\");\n\nvar logger_1 = __importDefault(require(\"../logger\"));\n\nvar types_1 = require(\"../types\");\n\nvar useChain_1 = __importDefault(require(\"./useChain\"));\n\nvar useRefresh_1 = __importDefault(require(\"./useRefresh\"));\n\nvar useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nvar actionCreator_1 = require(\"../actionCreator\");\n\nvar usePOWO_1 = __importDefault(require(\"./usePOWO\"));\n\nvar useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\n\nvar useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\n\nvar networkConfig_1 = __importDefault(require(\"../networkConfig\"));\n\nvar useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\n\nvar useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\n\nvar shouldRefreshTokenForRecordState = function shouldRefreshTokenForRecordState(state, gatewayToken, useWallet, powoRequested) {\n  if (!gatewayToken) return false;\n  if (gatewayToken.state !== types_1.State.ACTIVE) return false;\n  if (!useWallet || !useWallet.publicKey || powoRequested) return false;\n  return state !== types_1.GatekeeperRecordState.ISSUED;\n};\n\nexports.shouldRefreshTokenForRecordState = shouldRefreshTokenForRecordState;\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\n\nvar useOrchestration = function useOrchestration(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      stage = _ref.stage,\n      chainImplementation = _ref.chainImplementation,\n      gatekeeperClient = _ref.gatekeeperClient;\n\n  var _ref2 = (0, useWalletHooks_1.default)(wallet, state, dispatch),\n      expectWalletConnected = _ref2.expectWalletConnected;\n\n  var gatekeeperEndpoint = (0, config_1.getGatekeeperEndpoint)(stage);\n  var gatewayToken = state.gatewayToken,\n      tokenRequested = state.tokenRequested,\n      refreshIntervalId = state.refreshIntervalId,\n      powoRequested = state.powoRequested,\n      refreshInProgress = state.refreshInProgress,\n      walletToRefresh = state.walletToRefresh,\n      civicPass = state.civicPass,\n      refreshTokenState = state.refreshTokenState,\n      gatewayStatus = state.gatewayStatus,\n      gatekeeperNetworkAddress = state.gatekeeperNetworkAddress;\n  var networkConfig = (0, networkConfig_1.default)({\n    gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n    stage: stage\n  }); // Register our hooks here\n\n  var _ref3 = (0, usePOWO_1.default)({\n    wallet: wallet,\n    chainImplementation: chainImplementation\n  }, state, dispatch),\n      waitForConfirmPOWO = _ref3.waitForConfirmPOWO,\n      waitForPOWO = _ref3.waitForPOWO;\n\n  var _ref4 = (0, useGatekeeper_1.default)({\n    wallet: wallet,\n    stage: stage,\n    gatekeeperClient: gatekeeperClient\n  }, state, dispatch),\n      waitForGatekeeperIssuanceRequest = _ref4.waitForGatekeeperIssuanceRequest;\n\n  var _ref5 = (0, useRefresh_1.default)({\n    stage: stage,\n    gatekeeperClient: gatekeeperClient,\n    networkConfig: networkConfig\n  }, state, dispatch),\n      setRefreshPoll = _ref5.setRefreshPoll,\n      refreshTokenWithProof = _ref5.refreshTokenWithProof,\n      waitForUnexpiredGatewayToken = _ref5.waitForUnexpiredGatewayToken;\n\n  (0, useCivicPass_1.default)({\n    wallet: wallet\n  }, state, dispatch);\n  (0, useCivicPassEventListener_1.default)({\n    wallet: wallet,\n    chainImplementation: chainImplementation\n  });\n  (0, useChain_1.default)({\n    wallet: wallet,\n    chainImplementation: chainImplementation,\n    networkConfig: networkConfig\n  }, state, dispatch);\n  (0, useGatekeeperRecord_1.default)({\n    wallet: wallet,\n    gatekeeperClient: gatekeeperClient,\n    httpConfig: chainImplementation.httpConfig,\n    networkConfig: networkConfig\n  }, state, dispatch);\n  /**\n   * Refresh Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * wait until we have a payload that has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  var waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(function () {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n    var result = new Promise(function (resolve) {\n      var responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      var refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n      logger_1.default.debug('Refresh payload...', {\n        refreshPayload: refreshPayload,\n        refreshPayloadState: refreshPayload === undefined\n      });\n\n      if (refreshPayload !== undefined) {\n        logger_1.default.debug('Refreshing token...');\n        resolve(refreshPayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * wait until a gateway token exists in state before resolving the promise\n   */\n\n  var waitForGatewayToken = (0, react_1.useCallback)(function () {\n    expectWalletConnected();\n    return new Promise(function (resolve) {\n      logger_1.default.debug('waitForGatewayToken gatewayToken', !!gatewayToken);\n      if (gatewayToken) resolve(gatewayToken);\n    });\n  }, [gatewayToken, expectWalletConnected]);\n\n  var shouldRefreshToken = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var requiresGatekeeperRecordStatusCheck, tokenExpirationMarginSeconds, useWallet, record;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (gatewayToken) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", false);\n\n            case 2:\n              requiresGatekeeperRecordStatusCheck = networkConfig.requiresGatekeeperRecordStatusCheck, tokenExpirationMarginSeconds = networkConfig.tokenExpirationMarginSeconds;\n\n              if (!requiresGatekeeperRecordStatusCheck) {\n                _context.next = 10;\n                break;\n              }\n\n              useWallet = walletToRefresh || wallet;\n              _context.next = 7;\n              return gatekeeperClient().getGatekeeperRecordWithPayload(gatewayToken.owner);\n\n            case 7:\n              record = _context.sent;\n              dispatch({\n                type: 'getGatekeeperRecord_success',\n                gatekeeperRecord: record\n              });\n              return _context.abrupt(\"return\", (0, exports.shouldRefreshTokenForRecordState)(record.state, gatewayToken, useWallet, powoRequested));\n\n            case 10:\n              return _context.abrupt(\"return\", (0, tokenUtils_1.isTokenRefreshRequired)({\n                gatewayToken: gatewayToken,\n                tokenExpirationMarginSeconds: tokenExpirationMarginSeconds\n              }));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function shouldRefreshToken() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var checkRefreshRequired = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connectedWallet) {\n      var useWallet, shouldRefresh;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              useWallet = walletToRefresh || connectedWallet; // prefer the wallet set in state, this handles polling after disconnect\n              // Check preconditions for refresh:\n\n              _context2.next = 3;\n              return waitForGatewayToken();\n\n            case 3:\n              _context2.next = 5;\n              return shouldRefreshToken();\n\n            case 5:\n              shouldRefresh = _context2.sent;\n\n              if (shouldRefresh) {\n                _context2.next = 11;\n                break;\n              }\n\n              logger_1.default.debug('Refresh not needed. Skipping this attempt.');\n              dispatch({\n                type: 'refresh_complete'\n              });\n              setRefreshPoll(useWallet);\n              return _context2.abrupt(\"return\");\n\n            case 11:\n              logger_1.default.debug('Refresh required. Running the refresh flow.');\n              clearInterval(refreshIntervalId);\n              dispatch({\n                type: 'refresh_start'\n              });\n              dispatch({\n                type: 'civicPass_check_token_status'\n              });\n              dispatch({\n                type: 'refresh_clear_interval'\n              });\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x) {\n      return _ref7.apply(this, arguments);\n    };\n  }(), [gatekeeperEndpoint, gatewayToken, powoRequested, refreshInProgress, refreshIntervalId, wallet, walletToRefresh]);\n  /**\n   * Check if the user needs to refresh their roken\n   */\n\n  (0, react_1.useEffect)(function () {\n    if (refreshTokenState === types_1.RefreshTokenState.CHECK_TOKEN_EXPIRATION) {\n      logger_1.default.debug('Checking if refresh required');\n      checkRefreshRequired();\n    }\n  }, [refreshTokenState]);\n  /**\n   * If the user cancels out of the refresh flow start the refresh interval\n   */\n\n  (0, react_1.useEffect)(function () {\n    if (refreshTokenState === types_1.RefreshTokenState.CANCELLED || refreshTokenState === types_1.RefreshTokenState.FAILED) {\n      logger_1.default.debug('User canceled out of the refresh flow');\n      setRefreshPoll(wallet);\n    }\n  }, [refreshTokenState]);\n  /**\n   * When we have a token start polling to determine the refresh state\n   */\n\n  (0, react_1.useEffect)(function () {\n    if (gatewayStatus === types_1.GatewayStatus.ACTIVE) {\n      logger_1.default.debug('Start polling for the refresh interval');\n      setRefreshPoll(wallet);\n    }\n  }, [gatewayStatus]);\n  /**\n   * Issuance Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * poll until a gatekeeper record is found, once active check the chain for a token\n   * then dispatch a tokenChange event that will result in the token getting saved to state\n   * start token refresh polling once a valid token is set\n   */\n\n  var waitForOnChainToken = (0, react_1.useCallback)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var actionCreator;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!wallet) {\n              _context3.next = 5;\n              break;\n            }\n\n            logger_1.default.debug('waitForOnChainToken');\n            actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n              wallet: wallet,\n              chainImplementation: chainImplementation,\n              gatekeeperClient: gatekeeperClient,\n              dispatch: dispatch,\n              networkConfig: networkConfig\n            });\n            _context3.next = 5;\n            return actionCreator.waitForGatewayToken();\n\n          case 5:\n            return _context3.abrupt(\"return\", null);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n  /**\n   * wait until a presentation request id has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  var waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(function () {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n    var result = new Promise(function (resolve) {\n      var responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      var issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n      logger_1.default.debug('Issuance payload...', issuancePayload);\n\n      if (issuancePayload !== undefined) {\n        resolve(issuancePayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * wait until the user has requested a gateway token before resolving the promise\n   */\n\n  var waitForTokenRequested = (0, react_1.useCallback)(function () {\n    expectWalletConnected();\n    return new Promise(function (resolve) {\n      logger_1.default.debug('waitForTokenRequested tokenRequested', tokenRequested);\n      if (tokenRequested) resolve(true);\n    });\n  }, [tokenRequested, expectWalletConnected]);\n  /**\n   * wait until the user has requested a gateway token before resolving the promise\n   */\n\n  var checkForRequiredProof = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref9) {\n      var requiresProofOfWalletOwnership, payload, result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              requiresProofOfWalletOwnership = _ref9.requiresProofOfWalletOwnership, payload = _ref9.payload;\n              logger_1.default.debug('Checking for required proof', {\n                requiresProofOfWalletOwnership: requiresProofOfWalletOwnership,\n                payload: payload\n              });\n\n              if (!requiresProofOfWalletOwnership) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 5;\n              return waitForConfirmPOWO(payload).then(waitForPOWO);\n\n            case 5:\n              result = _context4.sent;\n              return _context4.abrupt(\"return\", result);\n\n            case 7:\n              return _context4.abrupt(\"return\", {\n                payload: payload\n              });\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x2) {\n      return _ref10.apply(this, arguments);\n    };\n  }(), [waitForConfirmPOWO, waitForPOWO]);\n  /**\n   * New token request flow:\n   * wait for the user to request a new token\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to request a new token issuance\n   * wait for a gatekeeper record to be created\n   * once this flow is complete a new Gatekeeper token should be available and set in state\n   */\n\n  (0, react_1.useEffect)(function () {\n    waitForTokenRequested().then(waitForCivicPassIssuanceResponsePayload).then(checkForRequiredProof).then(waitForGatekeeperIssuanceRequest).then(waitForOnChainToken).then(function () {\n      return setRefreshPoll(wallet);\n    }).catch(function (error) {\n      return logger_1.default.error('ERROR newTokenRequestFlow', error);\n    });\n  }, [waitForTokenRequested, waitForCivicPassIssuanceResponsePayload, checkForRequiredProof, waitForGatekeeperIssuanceRequest, waitForOnChainToken]);\n  /**\n   * Refresh start flow:\n   * Triggered when we have a refreshResponse payload\n   * wait refresh to be triggered from the iFrame\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to refresh the token\n   * check if token is expired and timeout if token does not update within timeframe\n   */\n\n  (0, react_1.useEffect)(function () {\n    var useWallet = walletToRefresh || wallet;\n    waitForCivicPassRefreshResponsePayload().then(checkForRequiredProof).then(refreshTokenWithProof(useWallet)).then(waitForUnexpiredGatewayToken).catch(function (error) {\n      logger_1.default.error('refreshFlow', error);\n      logger_1.default.error('refreshToken error', error);\n      dispatch({\n        type: 'refresh_complete'\n      });\n      setRefreshPoll(useWallet);\n    });\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof]);\n  /**\n   * Refresh complete flow:\n   * Triggered by token change event\n   * Check the refresh token state\n   * Check if token is unexpired and clear timeout if token is not expired\n   * Complete the refresh event and clear the refresh response payload\n   */\n\n  (0, react_1.useEffect)(function () {\n    var useWallet = walletToRefresh || wallet;\n\n    if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n      waitForUnexpiredGatewayToken().then(function () {\n        return setRefreshPoll(useWallet);\n      }).then(function () {\n        dispatch({\n          type: 'refresh_complete'\n        });\n      }).catch(function (error) {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_complete'\n        });\n        setRefreshPoll(useWallet);\n      });\n    }\n  }, [gatewayToken, refreshTokenState]);\n};\n\nexports.default = useOrchestration;","map":{"version":3,"sources":["/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useOrchestration.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","shouldRefreshTokenForRecordState","react_1","require","config_1","tokenUtils_1","logger_1","types_1","useChain_1","useRefresh_1","useWalletHooks_1","actionCreator_1","usePOWO_1","useGatekeeper_1","useGatekeeperRecord_1","networkConfig_1","useCivicPass_1","useCivicPassEventListener_1","state","gatewayToken","useWallet","powoRequested","State","ACTIVE","publicKey","GatekeeperRecordState","ISSUED","useOrchestration","dispatch","wallet","stage","chainImplementation","gatekeeperClient","default","expectWalletConnected","gatekeeperEndpoint","getGatekeeperEndpoint","tokenRequested","refreshIntervalId","refreshInProgress","walletToRefresh","civicPass","refreshTokenState","gatewayStatus","gatekeeperNetworkAddress","networkConfig","waitForConfirmPOWO","waitForPOWO","waitForGatekeeperIssuanceRequest","setRefreshPoll","refreshTokenWithProof","waitForUnexpiredGatewayToken","httpConfig","waitForCivicPassRefreshResponsePayload","useCallback","debug","result","Promise","resolve","responsePayload","refreshPayload","CivicPassMessageAction","REFRESH","refreshPayloadState","undefined","waitForGatewayToken","shouldRefreshToken","requiresGatekeeperRecordStatusCheck","tokenExpirationMarginSeconds","getGatekeeperRecordWithPayload","owner","record","type","gatekeeperRecord","isTokenRefreshRequired","checkRefreshRequired","connectedWallet","shouldRefresh","clearInterval","useEffect","RefreshTokenState","CHECK_TOKEN_EXPIRATION","CANCELLED","FAILED","GatewayStatus","waitForOnChainToken","actionCreator","gatewayTokenActionCreator","waitForCivicPassIssuanceResponsePayload","issuancePayload","ISSUANCE","waitForTokenRequested","checkForRequiredProof","requiresProofOfWalletOwnership","payload","then","catch","error","WAIT_FOR_ON_CHAIN"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldRefreshTokenForRecordState = void 0;\nconst react_1 = require(\"react\");\nconst config_1 = require(\"../solana/config\");\nconst tokenUtils_1 = require(\"../utils/tokenUtils\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst useChain_1 = __importDefault(require(\"./useChain\"));\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst actionCreator_1 = require(\"../actionCreator\");\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\nconst shouldRefreshTokenForRecordState = (state, gatewayToken, useWallet, powoRequested) => {\n    if (!gatewayToken)\n        return false;\n    if (gatewayToken.state !== types_1.State.ACTIVE)\n        return false;\n    if (!useWallet || !useWallet.publicKey || powoRequested)\n        return false;\n    return state !== types_1.GatekeeperRecordState.ISSUED;\n};\nexports.shouldRefreshTokenForRecordState = shouldRefreshTokenForRecordState;\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\nconst useOrchestration = ({ wallet, stage, chainImplementation, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const gatekeeperEndpoint = (0, config_1.getGatekeeperEndpoint)(stage);\n    const { gatewayToken, tokenRequested, refreshIntervalId, powoRequested, refreshInProgress, walletToRefresh, civicPass, refreshTokenState, gatewayStatus, gatekeeperNetworkAddress, } = state;\n    const networkConfig = (0, networkConfig_1.default)({ gatekeeperNetworkAddress, stage });\n    // Register our hooks here\n    const { waitForConfirmPOWO, waitForPOWO } = (0, usePOWO_1.default)({ wallet, chainImplementation }, state, dispatch);\n    const { waitForGatekeeperIssuanceRequest } = (0, useGatekeeper_1.default)({ wallet, stage, gatekeeperClient }, state, dispatch);\n    const { setRefreshPoll, refreshTokenWithProof, waitForUnexpiredGatewayToken } = (0, useRefresh_1.default)({ stage, gatekeeperClient, networkConfig }, state, dispatch);\n    (0, useCivicPass_1.default)({ wallet }, state, dispatch);\n    (0, useCivicPassEventListener_1.default)({ wallet, chainImplementation });\n    (0, useChain_1.default)({ wallet, chainImplementation, networkConfig }, state, dispatch);\n    (0, useGatekeeperRecord_1.default)({ wallet, gatekeeperClient, httpConfig: chainImplementation.httpConfig, networkConfig }, state, dispatch);\n    /**\n     * Refresh Flows ----------------------------------------------------------------\n     */\n    /**\n     * wait until we have a payload that has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n            logger_1.default.debug('Refresh payload...', {\n                refreshPayload,\n                refreshPayloadState: refreshPayload === undefined,\n            });\n            if (refreshPayload !== undefined) {\n                logger_1.default.debug('Refreshing token...');\n                resolve(refreshPayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * wait until a gateway token exists in state before resolving the promise\n     */\n    const waitForGatewayToken = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('waitForGatewayToken gatewayToken', !!gatewayToken);\n            if (gatewayToken)\n                resolve(gatewayToken);\n        });\n    }, [gatewayToken, expectWalletConnected]);\n    const shouldRefreshToken = async () => {\n        if (!gatewayToken)\n            return false;\n        const { requiresGatekeeperRecordStatusCheck, tokenExpirationMarginSeconds } = networkConfig;\n        if (requiresGatekeeperRecordStatusCheck) {\n            const useWallet = walletToRefresh || wallet;\n            const record = await gatekeeperClient().getGatekeeperRecordWithPayload(gatewayToken.owner);\n            dispatch({ type: 'getGatekeeperRecord_success', gatekeeperRecord: record });\n            return (0, exports.shouldRefreshTokenForRecordState)(record.state, gatewayToken, useWallet, powoRequested);\n        }\n        // Check for token expiration locally\n        return (0, tokenUtils_1.isTokenRefreshRequired)({ gatewayToken, tokenExpirationMarginSeconds });\n    };\n    const checkRefreshRequired = (0, react_1.useCallback)(async (connectedWallet) => {\n        const useWallet = walletToRefresh || connectedWallet; // prefer the wallet set in state, this handles polling after disconnect\n        // Check preconditions for refresh:\n        await waitForGatewayToken();\n        const shouldRefresh = await shouldRefreshToken();\n        if (!shouldRefresh) {\n            logger_1.default.debug('Refresh not needed. Skipping this attempt.');\n            dispatch({ type: 'refresh_complete' });\n            setRefreshPoll(useWallet);\n            return;\n        }\n        logger_1.default.debug('Refresh required. Running the refresh flow.');\n        clearInterval(refreshIntervalId);\n        dispatch({ type: 'refresh_start' });\n        dispatch({ type: 'civicPass_check_token_status' });\n        dispatch({ type: 'refresh_clear_interval' });\n    }, [gatekeeperEndpoint, gatewayToken, powoRequested, refreshInProgress, refreshIntervalId, wallet, walletToRefresh]);\n    /**\n     * Check if the user needs to refresh their roken\n     */\n    (0, react_1.useEffect)(() => {\n        if (refreshTokenState === types_1.RefreshTokenState.CHECK_TOKEN_EXPIRATION) {\n            logger_1.default.debug('Checking if refresh required');\n            checkRefreshRequired();\n        }\n    }, [refreshTokenState]);\n    /**\n     * If the user cancels out of the refresh flow start the refresh interval\n     */\n    (0, react_1.useEffect)(() => {\n        if (refreshTokenState === types_1.RefreshTokenState.CANCELLED || refreshTokenState === types_1.RefreshTokenState.FAILED) {\n            logger_1.default.debug('User canceled out of the refresh flow');\n            setRefreshPoll(wallet);\n        }\n    }, [refreshTokenState]);\n    /**\n     * When we have a token start polling to determine the refresh state\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatewayStatus === types_1.GatewayStatus.ACTIVE) {\n            logger_1.default.debug('Start polling for the refresh interval');\n            setRefreshPoll(wallet);\n        }\n    }, [gatewayStatus]);\n    /**\n     * Issuance Flows ----------------------------------------------------------------\n     */\n    /**\n     * poll until a gatekeeper record is found, once active check the chain for a token\n     * then dispatch a tokenChange event that will result in the token getting saved to state\n     * start token refresh polling once a valid token is set\n     */\n    const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n        if (wallet) {\n            logger_1.default.debug('waitForOnChainToken');\n            const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n                wallet,\n                chainImplementation,\n                gatekeeperClient,\n                dispatch,\n                networkConfig,\n            });\n            await actionCreator.waitForGatewayToken();\n        }\n        return null;\n    }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n    /**\n     * wait until a presentation request id has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n            logger_1.default.debug('Issuance payload...', issuancePayload);\n            if (issuancePayload !== undefined) {\n                resolve(issuancePayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * wait until the user has requested a gateway token before resolving the promise\n     */\n    const waitForTokenRequested = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('waitForTokenRequested tokenRequested', tokenRequested);\n            if (tokenRequested)\n                resolve(true);\n        });\n    }, [tokenRequested, expectWalletConnected]);\n    /**\n     * wait until the user has requested a gateway token before resolving the promise\n     */\n    const checkForRequiredProof = (0, react_1.useCallback)(async ({ requiresProofOfWalletOwnership, payload, }) => {\n        logger_1.default.debug('Checking for required proof', { requiresProofOfWalletOwnership, payload });\n        if (requiresProofOfWalletOwnership) {\n            const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n            return result;\n        }\n        return { payload };\n    }, [waitForConfirmPOWO, waitForPOWO]);\n    /**\n     * New token request flow:\n     * wait for the user to request a new token\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to request a new token issuance\n     * wait for a gatekeeper record to be created\n     * once this flow is complete a new Gatekeeper token should be available and set in state\n     */\n    (0, react_1.useEffect)(() => {\n        waitForTokenRequested()\n            .then(waitForCivicPassIssuanceResponsePayload)\n            .then(checkForRequiredProof)\n            .then(waitForGatekeeperIssuanceRequest)\n            .then(waitForOnChainToken)\n            .then(() => setRefreshPoll(wallet))\n            .catch((error) => logger_1.default.error('ERROR newTokenRequestFlow', error));\n    }, [\n        waitForTokenRequested,\n        waitForCivicPassIssuanceResponsePayload,\n        checkForRequiredProof,\n        waitForGatekeeperIssuanceRequest,\n        waitForOnChainToken,\n    ]);\n    /**\n     * Refresh start flow:\n     * Triggered when we have a refreshResponse payload\n     * wait refresh to be triggered from the iFrame\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to refresh the token\n     * check if token is expired and timeout if token does not update within timeframe\n     */\n    (0, react_1.useEffect)(() => {\n        const useWallet = walletToRefresh || wallet;\n        waitForCivicPassRefreshResponsePayload()\n            .then(checkForRequiredProof)\n            .then(refreshTokenWithProof(useWallet))\n            .then(waitForUnexpiredGatewayToken)\n            .catch((error) => {\n            logger_1.default.error('refreshFlow', error);\n            logger_1.default.error('refreshToken error', error);\n            dispatch({ type: 'refresh_complete' });\n            setRefreshPoll(useWallet);\n        });\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof]);\n    /**\n     * Refresh complete flow:\n     * Triggered by token change event\n     * Check the refresh token state\n     * Check if token is unexpired and clear timeout if token is not expired\n     * Complete the refresh event and clear the refresh response payload\n     */\n    (0, react_1.useEffect)(() => {\n        const useWallet = walletToRefresh || wallet;\n        if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n            waitForUnexpiredGatewayToken()\n                .then(() => setRefreshPoll(useWallet))\n                .then(() => {\n                dispatch({ type: 'refresh_complete' });\n            })\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_complete' });\n                setRefreshPoll(useWallet);\n            });\n        }\n    }, [gatewayToken, refreshTokenState]);\n};\nexports.default = useOrchestration;\n"]},"metadata":{},"sourceType":"script"}