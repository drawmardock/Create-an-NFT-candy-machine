{"ast":null,"code":"var _jsxFileName = \"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx\",\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { findGatewayToken, getGatewayTokenAddressForOwnerAndGatekeeperNetwork, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\n_c = CTAButton;\nexport const MintButton = _ref => {\n  _s();\n\n  let {\n    onMint,\n    candyMachine,\n    isMinting,\n    rpcUrl,\n    isActive\n  } = _ref;\n  const {\n    requestGatewayToken,\n    gatewayStatus\n  } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const wallet = useWallet();\n  const connection = useConnection();\n  useEffect(() => {\n    const mint = async () => {\n      await onMint();\n      setClicked(false);\n    };\n\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      mint();\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(connection.connection, webSocketSubscriptionId);\n      await onMint();\n      setClicked(false);\n      setVerified(false);\n    };\n\n    if (verified && clicked) {\n      mint();\n    }\n  }, [verified, clicked, connection.connection, onMint, webSocketSubscriptionId]);\n\n  const getMintButtonContent = () => {\n    if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 14\n      }, this);\n    } else if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isPresale || candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isWhitelistOnly) {\n      return 'WHITELIST MINT';\n    } else if (clicked && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 14\n      }, this);\n    }\n\n    return 'MINT';\n  };\n\n  return /*#__PURE__*/_jsxDEV(CTAButton, {\n    disabled: clicked || isMinting || !isActive,\n    onClick: async () => {\n      setClicked(true);\n\n      if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper) {\n        const network = candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n\n        if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            setClicked(true);\n          } else {\n            await requestGatewayToken();\n          }\n        } else if (network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' || network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt') {\n          const gatewayToken = await findGatewayToken(connection.connection, wallet.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork);\n\n          if (gatewayToken !== null && gatewayToken !== void 0 && gatewayToken.isValid()) {\n            await onMint();\n            setClicked(false);\n          } else {\n            let endpoint = rpcUrl;\n            if (endpoint.endsWith('/')) endpoint = endpoint.slice(0, -1);\n            if (!endpoint.startsWith('https')) endpoint = 'https' + endpoint.slice(4);\n            window.open(`https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`, '_blank');\n            const gatewayTokenAddress = await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(wallet.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork);\n            setWebSocketSubscriptionId(onGatewayTokenChange(connection.connection, gatewayTokenAddress, () => setVerified(true), 'confirmed'));\n          }\n        } else {\n          setClicked(false);\n          throw new Error(`Unknown Gatekeeper Network: ${network}`);\n        }\n      } else {\n        await onMint();\n        setClicked(false);\n      }\n    },\n    variant: \"contained\",\n    children: getMintButtonContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintButton, \"EscOJTAjESzqrCvMZetJ+ItjaoI=\", false, function () {\n  return [useGateway, useWallet, useConnection];\n});\n\n_c2 = MintButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CTAButton\");\n$RefreshReg$(_c2, \"MintButton\");","map":{"version":3,"sources":["/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx"],"names":["styled","Button","CircularProgress","GatewayStatus","useGateway","useEffect","useState","useConnection","useWallet","findGatewayToken","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","onGatewayTokenChange","removeAccountChangeListener","CTAButton","MintButton","onMint","candyMachine","isMinting","rpcUrl","isActive","requestGatewayToken","gatewayStatus","clicked","setClicked","verified","setVerified","webSocketSubscriptionId","setWebSocketSubscriptionId","wallet","connection","mint","ACTIVE","getMintButtonContent","state","isSoldOut","isPresale","isWhitelistOnly","gatekeeper","network","gatekeeperNetwork","toBase58","gatewayToken","publicKey","isValid","endpoint","endsWith","slice","startsWith","window","open","gatewayTokenAddress","Error"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  rpcUrl,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  isActive: boolean;\n  rpcUrl: string;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n\n  const wallet = useWallet();\n  const connection = useConnection();\n\n  useEffect(() => {\n    const mint = async () => {\n      await onMint();\n      setClicked(false);\n    };\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      mint();\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    } else if (clicked && candyMachine?.state.gatekeeper) {\n      return <CircularProgress />;\n    }\n\n    return 'MINT';\n  };\n\n  return (\n    <CTAButton\n      disabled={clicked || isMinting || !isActive}\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              setClicked(true);\n            } else {\n              await requestGatewayToken();\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n              setClicked(false);\n            } else {\n              let endpoint = rpcUrl;\n              if (endpoint.endsWith('/')) endpoint = endpoint.slice(0, -1);\n              if (!endpoint.startsWith('https'))\n                endpoint = 'https' + endpoint.slice(4);\n\n              window.open(\n                `https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}