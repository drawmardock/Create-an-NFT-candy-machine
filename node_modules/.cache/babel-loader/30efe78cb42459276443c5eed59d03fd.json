{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _slicedToArray = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fetch_retry_ts_1 = __importDefault(require(\"fetch-retry-ts\"));\n\nvar types_1 = require(\"../types\");\n\nvar logger_1 = __importDefault(require(\"../logger\"));\n\nvar config_1 = require(\"../config\");\n\nvar version_1 = __importDefault(require(\"./version\"));\n\nvar testRetryMultipler = function testRetryMultipler() {\n  return parseFloat(process.env.TEST_RETRY_MULTIPLIER || '') || 1;\n};\n\nvar defaultHeaders = {\n  'X-Civic-Client': \"\".concat((0, version_1.default)())\n};\n\nvar GatekeeperClient = /*#__PURE__*/function () {\n  function GatekeeperClient(gatekeeperClientConfig) {\n    _classCallCheck(this, GatekeeperClient);\n\n    this.baseUrl = gatekeeperClientConfig.baseUrl;\n    this.stage = gatekeeperClientConfig.stage;\n    this.queryParams = gatekeeperClientConfig.queryParams;\n    this.fetchImplementation = gatekeeperClientConfig.fetchImplementation || fetch; // By default retry on every 5xx or other Error (e.g. network failure):\n\n    this.defaultRetryParams = {\n      retries: gatekeeperClientConfig.numRetries || (0, config_1.getDefaultApiNumRetries)(this.stage),\n      retryOn: function retryOn(attempt, retries, error, response) {\n        return attempt < retries && (!!error || !response || response.status >= 500);\n      },\n      retryDelay: function retryDelay(attempt) {\n        return Math.pow(2, attempt) * 1000 * testRetryMultipler();\n      }\n    };\n    this.fetchWithRetry = (0, fetch_retry_ts_1.default)(this.fetchImplementation, this.defaultRetryParams);\n  }\n\n  _createClass(GatekeeperClient, [{\n    key: \"addQueryParams\",\n    value: function addQueryParams(url) {\n      if (!this.queryParams) return;\n      Object.entries(this.queryParams).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        url.searchParams.append(key, value);\n      });\n    }\n  }, {\n    key: \"urlForWallet\",\n    value: function urlForWallet(walletAddress) {\n      var url = new URL(\"\".concat(this.baseUrl, \"/\").concat(walletAddress));\n      this.addQueryParams(url);\n      return url.toString();\n    }\n  }, {\n    key: \"getGatekeeperRecordWithPayload\",\n    value: function () {\n      var _getGatekeeperRecordWithPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(walletAddress) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.fetchWithRetry(this.urlForWallet(walletAddress), {\n                  method: 'GET',\n                  headers: defaultHeaders\n                }).then( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.t0 = types_1.GatekeeperRecordState[types_1.GatekeeperRecordState[response.status]];\n                            _context.next = 3;\n                            return response.json();\n\n                          case 3:\n                            _context.t1 = _context.sent;\n                            return _context.abrupt(\"return\", {\n                              state: _context.t0,\n                              payload: _context.t1\n                            });\n\n                          case 5:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getGatekeeperRecordWithPayload(_x) {\n        return _getGatekeeperRecordWithPayload.apply(this, arguments);\n      }\n\n      return getGatekeeperRecordWithPayload;\n    }()\n  }, {\n    key: \"getGatekeeperStatus\",\n    value: function () {\n      var _getGatekeeperStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(walletAddress) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.fetchWithRetry(this.urlForWallet(walletAddress), {\n                  method: 'HEAD',\n                  headers: defaultHeaders\n                }).then(function (_ref4) {\n                  var status = _ref4.status;\n                  return status;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getGatekeeperStatus(_x3) {\n        return _getGatekeeperStatus.apply(this, arguments);\n      }\n\n      return getGatekeeperStatus;\n    }()\n  }, {\n    key: \"requestGatewayTokenFromGatekeeper\",\n    value: function () {\n      var _requestGatewayTokenFromGatekeeper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref5) {\n        var wallet, payload, proof, body, gatewayTokenCreationRequest, url;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                wallet = _ref5.wallet, payload = _ref5.payload, proof = _ref5.proof;\n                // produce a signature that proves ownership of a wallet\n                logger_1.default.debug('requestGatewayTokenFromGatekeeper request', Object.assign(Object.assign({}, payload), {\n                  proof: proof\n                })); // We only pass the wallet public key as part of the request if\n                // it was not passed as part of the presentation.\n\n                body = Object.assign(Object.assign({}, payload), {\n                  proof: proof,\n                  address: wallet.publicKey\n                });\n                gatewayTokenCreationRequest = Object.assign(Object.assign({}, body), {\n                  proof: proof\n                });\n                logger_1.default.debug('requestGatewayTokenFromGatekeeper Requesting a new gatekeeper token...', gatewayTokenCreationRequest);\n                url = new URL(this.baseUrl);\n                this.addQueryParams(url);\n                return _context4.abrupt(\"return\", this.fetchWithRetry(url.toString(), {\n                  method: 'POST',\n                  headers: Object.assign(Object.assign({}, defaultHeaders), {\n                    'Content-Type': 'application/json'\n                  }),\n                  body: JSON.stringify(gatewayTokenCreationRequest)\n                }).then(function (resp) {\n                  return resp;\n                }));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function requestGatewayTokenFromGatekeeper(_x4) {\n        return _requestGatewayTokenFromGatekeeper.apply(this, arguments);\n      }\n\n      return requestGatewayTokenFromGatekeeper;\n    }()\n    /**\n     * Tries to refresh a token.\n     * If it fails with a 5xx, handleFetchError will retry a number of times.\n     */\n\n  }, {\n    key: \"refreshToken\",\n    value: function () {\n      var _refreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(gatewayTokenKey, walletPublicKey, payload, proof) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                logger_1.default.debug('refreshToken...', {\n                  gatewayTokenKey: gatewayTokenKey,\n                  payload: payload\n                });\n                logger_1.default.debug('Attempting to refresh the Gateway token');\n                return _context5.abrupt(\"return\", this.fetchWithRetry(this.urlForWallet(walletPublicKey), {\n                  method: 'PATCH',\n                  headers: Object.assign(Object.assign({}, defaultHeaders), {\n                    'Content-Type': 'application/json'\n                  }),\n                  body: JSON.stringify(Object.assign({\n                    proof: proof,\n                    request: 'refresh'\n                  }, payload))\n                }));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function refreshToken(_x5, _x6, _x7, _x8) {\n        return _refreshToken.apply(this, arguments);\n      }\n\n      return refreshToken;\n    }()\n  }]);\n\n  return GatekeeperClient;\n}();\n\nexports.default = GatekeeperClient;","map":{"version":3,"sources":["/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/utils/gatekeeperClient.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fetch_retry_ts_1","require","types_1","logger_1","config_1","version_1","testRetryMultipler","parseFloat","process","env","TEST_RETRY_MULTIPLIER","defaultHeaders","default","GatekeeperClient","gatekeeperClientConfig","baseUrl","stage","queryParams","fetchImplementation","fetch","defaultRetryParams","retries","numRetries","getDefaultApiNumRetries","retryOn","attempt","error","response","status","retryDelay","fetchWithRetry","url","entries","forEach","key","searchParams","append","walletAddress","URL","addQueryParams","toString","urlForWallet","method","headers","then","GatekeeperRecordState","json","state","payload","wallet","proof","debug","assign","body","address","publicKey","gatewayTokenCreationRequest","JSON","stringify","resp","gatewayTokenKey","walletPublicKey","request"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fetch_retry_ts_1 = __importDefault(require(\"fetch-retry-ts\"));\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst config_1 = require(\"../config\");\nconst version_1 = __importDefault(require(\"./version\"));\nconst testRetryMultipler = () => parseFloat(process.env.TEST_RETRY_MULTIPLIER || '') || 1;\nconst defaultHeaders = {\n    'X-Civic-Client': `${(0, version_1.default)()}`,\n};\nclass GatekeeperClient {\n    constructor(gatekeeperClientConfig) {\n        this.baseUrl = gatekeeperClientConfig.baseUrl;\n        this.stage = gatekeeperClientConfig.stage;\n        this.queryParams = gatekeeperClientConfig.queryParams;\n        this.fetchImplementation = gatekeeperClientConfig.fetchImplementation || fetch;\n        // By default retry on every 5xx or other Error (e.g. network failure):\n        this.defaultRetryParams = {\n            retries: gatekeeperClientConfig.numRetries || (0, config_1.getDefaultApiNumRetries)(this.stage),\n            retryOn: (attempt, retries, error, response) => attempt < retries && (!!error || !response || response.status >= 500),\n            retryDelay: (attempt) => 2 ** attempt * 1000 * testRetryMultipler(),\n        };\n        this.fetchWithRetry = (0, fetch_retry_ts_1.default)(this.fetchImplementation, this.defaultRetryParams);\n    }\n    addQueryParams(url) {\n        if (!this.queryParams)\n            return;\n        Object.entries(this.queryParams).forEach(([key, value]) => {\n            url.searchParams.append(key, value);\n        });\n    }\n    urlForWallet(walletAddress) {\n        const url = new URL(`${this.baseUrl}/${walletAddress}`);\n        this.addQueryParams(url);\n        return url.toString();\n    }\n    async getGatekeeperRecordWithPayload(walletAddress) {\n        return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n            method: 'GET',\n            headers: defaultHeaders,\n        }).then(async (response) => ({\n            state: types_1.GatekeeperRecordState[types_1.GatekeeperRecordState[response.status]],\n            payload: await response.json(),\n        }));\n    }\n    async getGatekeeperStatus(walletAddress) {\n        return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n            method: 'HEAD',\n            headers: defaultHeaders,\n        }).then(({ status }) => status);\n    }\n    async requestGatewayTokenFromGatekeeper({ wallet, payload, proof }) {\n        // produce a signature that proves ownership of a wallet\n        logger_1.default.debug('requestGatewayTokenFromGatekeeper request', Object.assign(Object.assign({}, payload), { proof }));\n        // We only pass the wallet public key as part of the request if\n        // it was not passed as part of the presentation.\n        const body = Object.assign(Object.assign({}, payload), { proof, address: wallet.publicKey });\n        const gatewayTokenCreationRequest = Object.assign(Object.assign({}, body), { proof });\n        logger_1.default.debug('requestGatewayTokenFromGatekeeper Requesting a new gatekeeper token...', gatewayTokenCreationRequest);\n        const url = new URL(this.baseUrl);\n        this.addQueryParams(url);\n        return this.fetchWithRetry(url.toString(), {\n            method: 'POST',\n            headers: Object.assign(Object.assign({}, defaultHeaders), { 'Content-Type': 'application/json' }),\n            body: JSON.stringify(gatewayTokenCreationRequest),\n        }).then((resp) => resp);\n    }\n    /**\n     * Tries to refresh a token.\n     * If it fails with a 5xx, handleFetchError will retry a number of times.\n     */\n    async refreshToken(gatewayTokenKey, walletPublicKey, payload, proof) {\n        logger_1.default.debug('refreshToken...', { gatewayTokenKey, payload });\n        logger_1.default.debug('Attempting to refresh the Gateway token');\n        return this.fetchWithRetry(this.urlForWallet(walletPublicKey), {\n            method: 'PATCH',\n            headers: Object.assign(Object.assign({}, defaultHeaders), { 'Content-Type': 'application/json' }),\n            body: JSON.stringify(Object.assign({ proof, request: 'refresh' }, payload)),\n        });\n    }\n}\nexports.default = GatekeeperClient;\n"]},"metadata":{},"sourceType":"script"}