{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nvar solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nvar config_1 = require(\"./config\");\n\nvar types_1 = require(\"../types\");\n\nvar GatewayContext_1 = require(\"../gateway/GatewayContext\");\n\nvar logger_1 = __importDefault(require(\"../logger\")); // eslint-disable-next-line import/prefer-default-export\n\n\nvar chainImplementation = function chainImplementation(_ref) {\n  var clusterUrl = _ref.clusterUrl,\n      publicKey = _ref.publicKey,\n      signTransaction = _ref.signTransaction,\n      gatekeeperNetworkAddress = _ref.gatekeeperNetworkAddress,\n      stage = _ref.stage;\n  logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n  var connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: function addOnGatewayTokenChangeListener(gatewayToken, tokenDidChange) {\n      return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), function (token) {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: types_1.State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      });\n    },\n    removeOnGatewayTokenChangeListener: function removeOnGatewayTokenChangeListener(listenerId) {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: function () {\n      var _findGatewayToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var onChainToken;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n\n              case 2:\n                onChainToken = _context.sent;\n\n                if (onChainToken) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", undefined);\n\n              case 5:\n                return _context.abrupt(\"return\", {\n                  issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                  gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                  owner: onChainToken.owner.toBase58(),\n                  state: types_1.State[onChainToken.state],\n                  identifier: onChainToken.publicKey.toBase58(),\n                  expiryTime: onChainToken.expiryTime\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function findGatewayToken() {\n        return _findGatewayToken.apply(this, arguments);\n      }\n\n      return findGatewayToken;\n    }(),\n    proveWalletOwnership: function () {\n      var _proveWalletOwnership = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result.toString('base64'));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function proveWalletOwnership() {\n        return _proveWalletOwnership.apply(this, arguments);\n      }\n\n      return proveWalletOwnership;\n    }(),\n    chainType: types_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: (0, config_1.urlToCluster)(clusterUrl)\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nvar useSolanaGateway = function useSolanaGateway() {\n  var _ref2 = (0, GatewayContext_1.useGateway)(),\n      gatewayToken = _ref2.gatewayToken;\n\n  var solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"sources":["/home/drawmardock/Desktop/dapp/solana-nft/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/chainImplementation.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","web3_js_1","prove_solana_wallet_1","config_1","types_1","GatewayContext_1","logger_1","clusterUrl","publicKey","signTransaction","gatekeeperNetworkAddress","stage","default","debug","connection","Connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","undefined","proveWalletOwnership","prove","makeConfig","result","toString","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","urlToCluster","useGateway","solanaGatewayToken","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst types_1 = require(\"../types\");\nconst GatewayContext_1 = require(\"../gateway/GatewayContext\");\nconst logger_1 = __importDefault(require(\"../logger\"));\n// eslint-disable-next-line import/prefer-default-export\nconst chainImplementation = ({ clusterUrl, publicKey, signTransaction, gatekeeperNetworkAddress, stage, }) => {\n    logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n            return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: types_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            });\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: types_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n            return result.toString('base64');\n        },\n        chainType: types_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: (0, config_1.urlToCluster)(clusterUrl) },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken } = (0, GatewayContext_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), { gatewayToken: solanaGatewayToken });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"]},"metadata":{},"sourceType":"script"}